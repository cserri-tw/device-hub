// Code generated by protoc-gen-gogo.
// source: proto/devicehub.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proto/devicehub.proto

	It has these top-level messages:
		CreateRequest
		CreateReply
		DeleteRequest
		DeleteReply
		GetRequest
		GetReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest_Type int32

const (
	CreateRequest_ENDPOINT CreateRequest_Type = 0
	CreateRequest_LISTENER CreateRequest_Type = 1
)

var CreateRequest_Type_name = map[int32]string{
	0: "ENDPOINT",
	1: "LISTENER",
}
var CreateRequest_Type_value = map[string]int32{
	"ENDPOINT": 0,
	"LISTENER": 1,
}

func (x CreateRequest_Type) String() string {
	return proto1.EnumName(CreateRequest_Type_name, int32(x))
}
func (CreateRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDevicehub, []int{0, 0}
}

type CreateRequest_ListenerKind int32

const (
	CreateRequest_MQTT  CreateRequest_ListenerKind = 0
	CreateRequest_HTTP  CreateRequest_ListenerKind = 1
	CreateRequest_STDIN CreateRequest_ListenerKind = 2
)

var CreateRequest_ListenerKind_name = map[int32]string{
	0: "MQTT",
	1: "HTTP",
	2: "STDIN",
}
var CreateRequest_ListenerKind_value = map[string]int32{
	"MQTT":  0,
	"HTTP":  1,
	"STDIN": 2,
}

func (x CreateRequest_ListenerKind) String() string {
	return proto1.EnumName(CreateRequest_ListenerKind_name, int32(x))
}
func (CreateRequest_ListenerKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDevicehub, []int{0, 1}
}

type CreateRequest_EndpointKind int32

const (
	CreateRequest_STDOUT CreateRequest_EndpointKind = 0
)

var CreateRequest_EndpointKind_name = map[int32]string{
	0: "STDOUT",
}
var CreateRequest_EndpointKind_value = map[string]int32{
	"STDOUT": 0,
}

func (x CreateRequest_EndpointKind) String() string {
	return proto1.EnumName(CreateRequest_EndpointKind_name, int32(x))
}
func (CreateRequest_EndpointKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDevicehub, []int{0, 2}
}

type CreateRequest struct {
	Type CreateRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.CreateRequest_Type" json:"type"`
	// Types that are valid to be assigned to Kind:
	//	*CreateRequest_Listener
	//	*CreateRequest_Endpoint
	Kind          isCreateRequest_Kind `protobuf_oneof:"kind"`
	Configuration map[string]string    `protobuf:"bytes,4,rep,name=configuration" json:"configuration" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{0} }

type isCreateRequest_Kind interface {
	isCreateRequest_Kind()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateRequest_Listener struct {
	Listener CreateRequest_ListenerKind `protobuf:"varint,2,opt,name=listener,proto3,enum=proto.CreateRequest_ListenerKind,oneof"`
}
type CreateRequest_Endpoint struct {
	Endpoint CreateRequest_EndpointKind `protobuf:"varint,3,opt,name=endpoint,proto3,enum=proto.CreateRequest_EndpointKind,oneof"`
}

func (*CreateRequest_Listener) isCreateRequest_Kind() {}
func (*CreateRequest_Endpoint) isCreateRequest_Kind() {}

func (m *CreateRequest) GetKind() isCreateRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *CreateRequest) GetType() CreateRequest_Type {
	if m != nil {
		return m.Type
	}
	return CreateRequest_ENDPOINT
}

func (m *CreateRequest) GetListener() CreateRequest_ListenerKind {
	if x, ok := m.GetKind().(*CreateRequest_Listener); ok {
		return x.Listener
	}
	return CreateRequest_MQTT
}

func (m *CreateRequest) GetEndpoint() CreateRequest_EndpointKind {
	if x, ok := m.GetKind().(*CreateRequest_Endpoint); ok {
		return x.Endpoint
	}
	return CreateRequest_STDOUT
}

func (m *CreateRequest) GetConfiguration() map[string]string {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateRequest) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _CreateRequest_OneofMarshaler, _CreateRequest_OneofUnmarshaler, _CreateRequest_OneofSizer, []interface{}{
		(*CreateRequest_Listener)(nil),
		(*CreateRequest_Endpoint)(nil),
	}
}

func _CreateRequest_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*CreateRequest)
	// kind
	switch x := m.Kind.(type) {
	case *CreateRequest_Listener:
		_ = b.EncodeVarint(2<<3 | proto1.WireVarint)
		_ = b.EncodeVarint(uint64(x.Listener))
	case *CreateRequest_Endpoint:
		_ = b.EncodeVarint(3<<3 | proto1.WireVarint)
		_ = b.EncodeVarint(uint64(x.Endpoint))
	case nil:
	default:
		return fmt.Errorf("CreateRequest.Kind has unexpected type %T", x)
	}
	return nil
}

func _CreateRequest_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*CreateRequest)
	switch tag {
	case 2: // kind.listener
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &CreateRequest_Listener{CreateRequest_ListenerKind(x)}
		return true, err
	case 3: // kind.endpoint
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &CreateRequest_Endpoint{CreateRequest_EndpointKind(x)}
		return true, err
	default:
		return false, nil
	}
}

func _CreateRequest_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*CreateRequest)
	// kind
	switch x := m.Kind.(type) {
	case *CreateRequest_Listener:
		n += proto1.SizeVarint(2<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.Listener))
	case *CreateRequest_Endpoint:
		n += proto1.SizeVarint(3<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.Endpoint))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Uid   string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto1.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{1} }

func (m *CreateReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CreateReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateReply) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type DeleteRequest struct {
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{2} }

type DeleteReply struct {
}

func (m *DeleteReply) Reset()                    { *m = DeleteReply{} }
func (m *DeleteReply) String() string            { return proto1.CompactTextString(m) }
func (*DeleteReply) ProtoMessage()               {}
func (*DeleteReply) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{3} }

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{4} }

type GetReply struct {
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto1.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptorDevicehub, []int{5} }

func init() {
	proto1.RegisterType((*CreateRequest)(nil), "proto.CreateRequest")
	proto1.RegisterType((*CreateReply)(nil), "proto.CreateReply")
	proto1.RegisterType((*DeleteRequest)(nil), "proto.DeleteRequest")
	proto1.RegisterType((*DeleteReply)(nil), "proto.DeleteReply")
	proto1.RegisterType((*GetRequest)(nil), "proto.GetRequest")
	proto1.RegisterType((*GetReply)(nil), "proto.GetReply")
	proto1.RegisterEnum("proto.CreateRequest_Type", CreateRequest_Type_name, CreateRequest_Type_value)
	proto1.RegisterEnum("proto.CreateRequest_ListenerKind", CreateRequest_ListenerKind_name, CreateRequest_ListenerKind_value)
	proto1.RegisterEnum("proto.CreateRequest_EndpointKind", CreateRequest_EndpointKind_name, CreateRequest_EndpointKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/proto.Hub/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := grpc.Invoke(ctx, "/proto.Hub/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/proto.Hub/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Hub_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Hub_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Hub_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/devicehub.proto",
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDevicehub(dAtA, i, uint64(m.Type))
	}
	if m.Kind != nil {
		nn1, err := m.Kind.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Configuration) > 0 {
		for k, _ := range m.Configuration {
			dAtA[i] = 0x22
			i++
			v := m.Configuration[k]
			mapSize := 1 + len(k) + sovDevicehub(uint64(len(k))) + 1 + len(v) + sovDevicehub(uint64(len(v)))
			i = encodeVarintDevicehub(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDevicehub(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDevicehub(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *CreateRequest_Listener) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintDevicehub(dAtA, i, uint64(m.Listener))
	return i, nil
}
func (m *CreateRequest_Endpoint) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintDevicehub(dAtA, i, uint64(m.Endpoint))
	return i, nil
}
func (m *CreateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevicehub(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevicehub(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Devicehub(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Devicehub(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDevicehub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDevicehub(uint64(m.Type))
	}
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	if len(m.Configuration) > 0 {
		for k, v := range m.Configuration {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDevicehub(uint64(len(k))) + 1 + len(v) + sovDevicehub(uint64(len(v)))
			n += mapEntrySize + 1 + sovDevicehub(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreateRequest_Listener) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDevicehub(uint64(m.Listener))
	return n
}
func (m *CreateRequest_Endpoint) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDevicehub(uint64(m.Endpoint))
	return n
}
func (m *CreateReply) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovDevicehub(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovDevicehub(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovDevicehub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevicehub(x uint64) (n int) {
	return sovDevicehub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CreateRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listener", wireType)
			}
			var v CreateRequest_ListenerKind
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (CreateRequest_ListenerKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &CreateRequest_Listener{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var v CreateRequest_EndpointKind
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (CreateRequest_EndpointKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &CreateRequest_Endpoint{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicehub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthDevicehub
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Configuration == nil {
				m.Configuration = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicehub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevicehub
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthDevicehub
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Configuration[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Configuration[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicehub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicehub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevicehub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicehub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevicehub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevicehub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicehub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevicehub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevicehub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevicehub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevicehub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevicehub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proto/devicehub.proto", fileDescriptorDevicehub) }

var fileDescriptorDevicehub = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xf4, 0xc6, 0x4e, 0xe4, 0x7c, 0xf9, 0xa9, 0x59, 0xb5, 0x52, 0xc8, 0x21, 0x2a, 0xbe, 0x50,
	0x09, 0xd5, 0x48, 0x81, 0x03, 0x70, 0x01, 0xa5, 0xb6, 0x9a, 0x88, 0x36, 0x0d, 0x8e, 0x79, 0x80,
	0xa4, 0xfe, 0xda, 0xae, 0x62, 0x79, 0x8d, 0xbb, 0xae, 0xe4, 0x37, 0xe1, 0xc4, 0xf3, 0xf4, 0xc8,
	0x23, 0xa0, 0xf0, 0x22, 0x68, 0x37, 0xb1, 0x71, 0x20, 0xea, 0xc9, 0x3b, 0xdf, 0xce, 0x8c, 0xe7,
	0x1b, 0xcb, 0x70, 0x94, 0xa4, 0x5c, 0xf0, 0xd7, 0x21, 0x3e, 0xb0, 0x6b, 0xbc, 0xcb, 0x96, 0x8e,
	0xc2, 0xb4, 0xae, 0x1e, 0xf6, 0xa3, 0x0e, 0x9d, 0xb3, 0x14, 0x17, 0x02, 0x7d, 0xfc, 0x96, 0xe1,
	0xbd, 0xa0, 0xa7, 0x60, 0x88, 0x3c, 0xc1, 0x1e, 0x39, 0x26, 0x27, 0xdd, 0xe1, 0xf3, 0x0d, 0xdd,
	0xd9, 0xe1, 0x38, 0x41, 0x9e, 0xa0, 0xaf, 0x68, 0xf4, 0x23, 0x98, 0x11, 0xbb, 0x17, 0x18, 0x63,
	0xda, 0xab, 0x29, 0xc9, 0x8b, 0xbd, 0x92, 0x8b, 0x2d, 0xe9, 0x33, 0x8b, 0xc3, 0xb1, 0xe6, 0x97,
	0x22, 0x69, 0x80, 0x71, 0x98, 0x70, 0x16, 0x8b, 0x9e, 0xfe, 0x84, 0x81, 0xb7, 0x25, 0x15, 0x06,
	0x85, 0x88, 0x5e, 0x42, 0xe7, 0x9a, 0xc7, 0x37, 0xec, 0x36, 0x4b, 0x17, 0x82, 0xf1, 0xb8, 0x67,
	0x1c, 0xeb, 0x27, 0xad, 0xe1, 0xcb, 0xbd, 0x2e, 0x67, 0x55, 0xa6, 0x17, 0x8b, 0x34, 0xf7, 0x77,
	0xd5, 0xfd, 0x4f, 0x40, 0xff, 0x27, 0x51, 0x0b, 0xf4, 0x15, 0xe6, 0xaa, 0x94, 0xa6, 0x2f, 0x8f,
	0xf4, 0x10, 0xea, 0x0f, 0x8b, 0x28, 0x43, 0xb5, 0x75, 0xd3, 0xdf, 0x80, 0x0f, 0xb5, 0x77, 0xc4,
	0xb6, 0xc1, 0x90, 0x05, 0xd1, 0x36, 0x98, 0xde, 0xd4, 0x9d, 0x5d, 0x4d, 0xa6, 0x81, 0xa5, 0x49,
	0x74, 0x31, 0x99, 0x07, 0xde, 0xd4, 0xf3, 0x2d, 0x62, 0x9f, 0x42, 0xbb, 0xda, 0x08, 0x35, 0xc1,
	0xb8, 0xfc, 0x12, 0x48, 0x9e, 0x09, 0xc6, 0x38, 0x08, 0x66, 0x16, 0xa1, 0x4d, 0xa8, 0xcf, 0x03,
	0x77, 0x32, 0xb5, 0x6a, 0x76, 0x1f, 0xda, 0xd5, 0xfd, 0x29, 0x40, 0x63, 0x1e, 0xb8, 0x57, 0x5f,
	0x03, 0x4b, 0x1b, 0x35, 0xc0, 0x58, 0xb1, 0x38, 0xb4, 0x3d, 0x68, 0x15, 0xbb, 0x26, 0x51, 0x4e,
	0xbb, 0x50, 0xe3, 0x2b, 0x15, 0xd8, 0xf4, 0x6b, 0x7c, 0x25, 0xf3, 0x62, 0x9a, 0xf2, 0xb4, 0xc8,
	0xab, 0x80, 0xdc, 0x2b, 0x63, 0xa1, 0x2a, 0xbe, 0xe9, 0xcb, 0xa3, 0x7d, 0x00, 0x1d, 0x17, 0x23,
	0x2c, 0x2b, 0xb3, 0x3b, 0xd0, 0x2a, 0x06, 0x49, 0x94, 0xdb, 0x6d, 0x80, 0x73, 0x14, 0xc5, 0x25,
	0x80, 0xa9, 0x50, 0x12, 0xe5, 0xc3, 0x1f, 0x04, 0xf4, 0x71, 0xb6, 0xa4, 0x6f, 0xa1, 0xb1, 0x09,
	0x42, 0x0f, 0xf7, 0x7d, 0x83, 0x3e, 0xfd, 0x67, 0x2a, 0x5d, 0x35, 0xa9, 0xda, 0xbc, 0xa6, 0x54,
	0xed, 0xc4, 0x28, 0x55, 0xd5, 0x2c, 0x1a, 0x7d, 0x05, 0xfa, 0x39, 0x0a, 0xfa, 0x6c, 0x7b, 0xf9,
	0x37, 0x59, 0xff, 0xa0, 0x3a, 0x52, 0xe4, 0xd1, 0xfb, 0xc7, 0xf5, 0x80, 0xfc, 0x5c, 0x0f, 0xc8,
	0xaf, 0xf5, 0x80, 0x7c, 0xff, 0x3d, 0xd0, 0xe0, 0x88, 0x71, 0x47, 0xdc, 0xb1, 0xf8, 0xf6, 0x26,
	0x8b, 0x9c, 0xf2, 0x17, 0x19, 0x75, 0x5d, 0x75, 0x1c, 0x67, 0xcb, 0x99, 0xf4, 0x98, 0x91, 0x65,
	0x43, 0x99, 0xbd, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x6d, 0xab, 0x99, 0x4e, 0x03, 0x00,
	0x00,
}
