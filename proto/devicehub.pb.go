// Code generated by protoc-gen-go.
// source: proto/devicehub.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/devicehub.proto

It has these top-level messages:
	EndpointAddRequest
	EndpointAddReply
	EndpointDeleteRequest
	EndpointDeleteReply
	EndpointListRequest
	EndpointListReply
	ListenerAddRequest
	ListenerAddReply
	ListenerDeleteRequest
	ListenerDeleteReply
	ListenerListRequest
	ListenerListReply
	PipeAddRequest
	PipeAddReply
	PipeDeleteRequest
	PipeDeleteReply
	PipeListRequest
	PipeListReply
	Pipe
	PipeStatus
	Endpoint
	Listener
	Profile
	Script
	StatsRequest
	StatsReply
	Statistics
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type PipeStatus_State int32

const (
	PipeStatus_UNKNOWN PipeStatus_State = 0
	PipeStatus_RUNNING PipeStatus_State = 1
	PipeStatus_STOPPED PipeStatus_State = 2
	PipeStatus_ERRORED PipeStatus_State = 3
)

var PipeStatus_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "RUNNING",
	2: "STOPPED",
	3: "ERRORED",
}
var PipeStatus_State_value = map[string]int32{
	"UNKNOWN": 0,
	"RUNNING": 1,
	"STOPPED": 2,
	"ERRORED": 3,
}

func (x PipeStatus_State) String() string {
	return proto1.EnumName(PipeStatus_State_name, int32(x))
}
func (PipeStatus_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type Profile_Type int32

const (
	Profile_Script Profile_Type = 0
)

var Profile_Type_name = map[int32]string{
	0: "Script",
}
var Profile_Type_value = map[string]int32{
	"Script": 0,
}

func (x Profile_Type) String() string {
	return proto1.EnumName(Profile_Type_name, int32(x))
}
func (Profile_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

type Script_Type int32

const (
	Script_JAVASCRIPT Script_Type = 0
)

var Script_Type_name = map[int32]string{
	0: "JAVASCRIPT",
}
var Script_Type_value = map[string]int32{
	"JAVASCRIPT": 0,
}

func (x Script_Type) String() string {
	return proto1.EnumName(Script_Type_name, int32(x))
}
func (Script_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

type Script_Input int32

const (
	Script_JSON Script_Input = 0
	Script_CSV  Script_Input = 1
	Script_XML  Script_Input = 2
)

var Script_Input_name = map[int32]string{
	0: "JSON",
	1: "CSV",
	2: "XML",
}
var Script_Input_value = map[string]int32{
	"JSON": 0,
	"CSV":  1,
	"XML":  2,
}

func (x Script_Input) String() string {
	return proto1.EnumName(Script_Input_name, int32(x))
}
func (Script_Input) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 1} }

type EndpointAddRequest struct {
	Endpoint *Endpoint `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint"`
}

func (m *EndpointAddRequest) Reset()                    { *m = EndpointAddRequest{} }
func (m *EndpointAddRequest) String() string            { return proto1.CompactTextString(m) }
func (*EndpointAddRequest) ProtoMessage()               {}
func (*EndpointAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EndpointAddRequest) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type EndpointAddReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
	Uid   string `protobuf:"bytes,3,opt,name=uid" json:"uid"`
}

func (m *EndpointAddReply) Reset()                    { *m = EndpointAddReply{} }
func (m *EndpointAddReply) String() string            { return proto1.CompactTextString(m) }
func (*EndpointAddReply) ProtoMessage()               {}
func (*EndpointAddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EndpointAddReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *EndpointAddReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EndpointAddReply) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type EndpointDeleteRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid"`
}

func (m *EndpointDeleteRequest) Reset()                    { *m = EndpointDeleteRequest{} }
func (m *EndpointDeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*EndpointDeleteRequest) ProtoMessage()               {}
func (*EndpointDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EndpointDeleteRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type EndpointDeleteReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *EndpointDeleteReply) Reset()                    { *m = EndpointDeleteReply{} }
func (m *EndpointDeleteReply) String() string            { return proto1.CompactTextString(m) }
func (*EndpointDeleteReply) ProtoMessage()               {}
func (*EndpointDeleteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EndpointDeleteReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *EndpointDeleteReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EndpointListRequest struct {
}

func (m *EndpointListRequest) Reset()                    { *m = EndpointListRequest{} }
func (m *EndpointListRequest) String() string            { return proto1.CompactTextString(m) }
func (*EndpointListRequest) ProtoMessage()               {}
func (*EndpointListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type EndpointListReply struct {
	Ok        bool        `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error     string      `protobuf:"bytes,2,opt,name=error" json:"error"`
	Endpoints []*Endpoint `protobuf:"bytes,3,rep,name=endpoints" json:"endpoints"`
}

func (m *EndpointListReply) Reset()                    { *m = EndpointListReply{} }
func (m *EndpointListReply) String() string            { return proto1.CompactTextString(m) }
func (*EndpointListReply) ProtoMessage()               {}
func (*EndpointListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EndpointListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *EndpointListReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *EndpointListReply) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type ListenerAddRequest struct {
}

func (m *ListenerAddRequest) Reset()                    { *m = ListenerAddRequest{} }
func (m *ListenerAddRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListenerAddRequest) ProtoMessage()               {}
func (*ListenerAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListenerAddReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *ListenerAddReply) Reset()                    { *m = ListenerAddReply{} }
func (m *ListenerAddReply) String() string            { return proto1.CompactTextString(m) }
func (*ListenerAddReply) ProtoMessage()               {}
func (*ListenerAddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListenerAddReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListenerAddReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ListenerDeleteRequest struct {
}

func (m *ListenerDeleteRequest) Reset()                    { *m = ListenerDeleteRequest{} }
func (m *ListenerDeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListenerDeleteRequest) ProtoMessage()               {}
func (*ListenerDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ListenerDeleteReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *ListenerDeleteReply) Reset()                    { *m = ListenerDeleteReply{} }
func (m *ListenerDeleteReply) String() string            { return proto1.CompactTextString(m) }
func (*ListenerDeleteReply) ProtoMessage()               {}
func (*ListenerDeleteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListenerDeleteReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListenerDeleteReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ListenerListRequest struct {
}

func (m *ListenerListRequest) Reset()                    { *m = ListenerListRequest{} }
func (m *ListenerListRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListenerListRequest) ProtoMessage()               {}
func (*ListenerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ListenerListReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *ListenerListReply) Reset()                    { *m = ListenerListReply{} }
func (m *ListenerListReply) String() string            { return proto1.CompactTextString(m) }
func (*ListenerListReply) ProtoMessage()               {}
func (*ListenerListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListenerListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ListenerListReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PipeAddRequest struct {
	Uri          string   `protobuf:"bytes,1,opt,name=uri" json:"uri"`
	ProfileUid   string   `protobuf:"bytes,2,opt,name=profile_uid,json=profileUid" json:"profile_uid"`
	ListenerUid  string   `protobuf:"bytes,3,opt,name=listener_uid,json=listenerUid" json:"listener_uid"`
	EndpointUids []string `protobuf:"bytes,4,rep,name=endpoint_uids,json=endpointUids" json:"endpoint_uids"`
}

func (m *PipeAddRequest) Reset()                    { *m = PipeAddRequest{} }
func (m *PipeAddRequest) String() string            { return proto1.CompactTextString(m) }
func (*PipeAddRequest) ProtoMessage()               {}
func (*PipeAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PipeAddRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PipeAddRequest) GetProfileUid() string {
	if m != nil {
		return m.ProfileUid
	}
	return ""
}

func (m *PipeAddRequest) GetListenerUid() string {
	if m != nil {
		return m.ListenerUid
	}
	return ""
}

func (m *PipeAddRequest) GetEndpointUids() []string {
	if m != nil {
		return m.EndpointUids
	}
	return nil
}

type PipeAddReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *PipeAddReply) Reset()                    { *m = PipeAddReply{} }
func (m *PipeAddReply) String() string            { return proto1.CompactTextString(m) }
func (*PipeAddReply) ProtoMessage()               {}
func (*PipeAddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PipeAddReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PipeAddReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PipeDeleteRequest struct {
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri"`
}

func (m *PipeDeleteRequest) Reset()                    { *m = PipeDeleteRequest{} }
func (m *PipeDeleteRequest) String() string            { return proto1.CompactTextString(m) }
func (*PipeDeleteRequest) ProtoMessage()               {}
func (*PipeDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PipeDeleteRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type PipeDeleteReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *PipeDeleteReply) Reset()                    { *m = PipeDeleteReply{} }
func (m *PipeDeleteReply) String() string            { return proto1.CompactTextString(m) }
func (*PipeDeleteReply) ProtoMessage()               {}
func (*PipeDeleteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PipeDeleteReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PipeDeleteReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PipeListRequest struct {
}

func (m *PipeListRequest) Reset()                    { *m = PipeListRequest{} }
func (m *PipeListRequest) String() string            { return proto1.CompactTextString(m) }
func (*PipeListRequest) ProtoMessage()               {}
func (*PipeListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type PipeListReply struct {
	Pipes []*Pipe `protobuf:"bytes,1,rep,name=pipes" json:"pipes"`
}

func (m *PipeListReply) Reset()                    { *m = PipeListReply{} }
func (m *PipeListReply) String() string            { return proto1.CompactTextString(m) }
func (*PipeListReply) ProtoMessage()               {}
func (*PipeListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PipeListReply) GetPipes() []*Pipe {
	if m != nil {
		return m.Pipes
	}
	return nil
}

type Pipe struct {
	Uri       string      `protobuf:"bytes,1,opt,name=uri" json:"uri"`
	Profile   *Profile    `protobuf:"bytes,3,opt,name=profile" json:"profile"`
	Listener  *Endpoint   `protobuf:"bytes,4,opt,name=listener" json:"listener"`
	Endpoints []*Endpoint `protobuf:"bytes,6,rep,name=endpoints" json:"endpoints"`
}

func (m *Pipe) Reset()                    { *m = Pipe{} }
func (m *Pipe) String() string            { return proto1.CompactTextString(m) }
func (*Pipe) ProtoMessage()               {}
func (*Pipe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Pipe) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Pipe) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Pipe) GetListener() *Endpoint {
	if m != nil {
		return m.Listener
	}
	return nil
}

func (m *Pipe) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type PipeStatus struct {
	State PipeStatus_State `protobuf:"varint,1,opt,name=state,enum=proto.PipeStatus_State" json:"state"`
	Stats *Statistics      `protobuf:"bytes,2,opt,name=stats" json:"stats"`
}

func (m *PipeStatus) Reset()                    { *m = PipeStatus{} }
func (m *PipeStatus) String() string            { return proto1.CompactTextString(m) }
func (*PipeStatus) ProtoMessage()               {}
func (*PipeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PipeStatus) GetState() PipeStatus_State {
	if m != nil {
		return m.State
	}
	return PipeStatus_UNKNOWN
}

func (m *PipeStatus) GetStats() *Statistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Endpoint struct {
	Uid           string            `protobuf:"bytes,1,opt,name=uid" json:"uid"`
	Type          string            `protobuf:"bytes,2,opt,name=type" json:"type"`
	Configuration map[string]string `protobuf:"bytes,3,rep,name=configuration" json:"configuration" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto1.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Endpoint) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Endpoint) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Endpoint) GetConfiguration() map[string]string {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type Listener struct {
	Uid           string            `protobuf:"bytes,1,opt,name=uid" json:"uid"`
	Type          string            `protobuf:"bytes,2,opt,name=type" json:"type"`
	Configuration map[string]string `protobuf:"bytes,3,rep,name=configuration" json:"configuration" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Listener) Reset()                    { *m = Listener{} }
func (m *Listener) String() string            { return proto1.CompactTextString(m) }
func (*Listener) ProtoMessage()               {}
func (*Listener) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Listener) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Listener) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Listener) GetConfiguration() map[string]string {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type Profile struct {
	Uid         string       `protobuf:"bytes,1,opt,name=uid" json:"uid"`
	Name        string       `protobuf:"bytes,2,opt,name=name" json:"name"`
	Type        Profile_Type `protobuf:"varint,3,opt,name=type,enum=proto.Profile_Type" json:"type"`
	Description string       `protobuf:"bytes,4,opt,name=description" json:"description"`
	Version     string       `protobuf:"bytes,5,opt,name=version" json:"version"`
	Script      *Script      `protobuf:"bytes,6,opt,name=script" json:"script"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto1.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Profile) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetType() Profile_Type {
	if m != nil {
		return m.Type
	}
	return Profile_Script
}

func (m *Profile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Profile) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Profile) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

type Script struct {
	Main     string       `protobuf:"bytes,1,opt,name=main" json:"main"`
	Runtime  Script_Type  `protobuf:"varint,2,opt,name=runtime,enum=proto.Script_Type" json:"runtime"`
	Input    Script_Input `protobuf:"varint,3,opt,name=input,enum=proto.Script_Input" json:"input"`
	Contents string       `protobuf:"bytes,4,opt,name=contents" json:"contents"`
}

func (m *Script) Reset()                    { *m = Script{} }
func (m *Script) String() string            { return proto1.CompactTextString(m) }
func (*Script) ProtoMessage()               {}
func (*Script) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Script) GetMain() string {
	if m != nil {
		return m.Main
	}
	return ""
}

func (m *Script) GetRuntime() Script_Type {
	if m != nil {
		return m.Runtime
	}
	return Script_JAVASCRIPT
}

func (m *Script) GetInput() Script_Input {
	if m != nil {
		return m.Input
	}
	return Script_JSON
}

func (m *Script) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type StatsRequest struct {
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type StatsReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error"`
}

func (m *StatsReply) Reset()                    { *m = StatsReply{} }
func (m *StatsReply) String() string            { return proto1.CompactTextString(m) }
func (*StatsReply) ProtoMessage()               {}
func (*StatsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *StatsReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *StatsReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Statistics struct {
	Total  uint64 `protobuf:"varint,1,opt,name=total" json:"total"`
	Errors uint64 `protobuf:"varint,2,opt,name=errors" json:"errors"`
	Ok     uint64 `protobuf:"varint,3,opt,name=ok" json:"ok"`
}

func (m *Statistics) Reset()                    { *m = Statistics{} }
func (m *Statistics) String() string            { return proto1.CompactTextString(m) }
func (*Statistics) ProtoMessage()               {}
func (*Statistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Statistics) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Statistics) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *Statistics) GetOk() uint64 {
	if m != nil {
		return m.Ok
	}
	return 0
}

func init() {
	proto1.RegisterType((*EndpointAddRequest)(nil), "proto.EndpointAddRequest")
	proto1.RegisterType((*EndpointAddReply)(nil), "proto.EndpointAddReply")
	proto1.RegisterType((*EndpointDeleteRequest)(nil), "proto.EndpointDeleteRequest")
	proto1.RegisterType((*EndpointDeleteReply)(nil), "proto.EndpointDeleteReply")
	proto1.RegisterType((*EndpointListRequest)(nil), "proto.EndpointListRequest")
	proto1.RegisterType((*EndpointListReply)(nil), "proto.EndpointListReply")
	proto1.RegisterType((*ListenerAddRequest)(nil), "proto.ListenerAddRequest")
	proto1.RegisterType((*ListenerAddReply)(nil), "proto.ListenerAddReply")
	proto1.RegisterType((*ListenerDeleteRequest)(nil), "proto.ListenerDeleteRequest")
	proto1.RegisterType((*ListenerDeleteReply)(nil), "proto.ListenerDeleteReply")
	proto1.RegisterType((*ListenerListRequest)(nil), "proto.ListenerListRequest")
	proto1.RegisterType((*ListenerListReply)(nil), "proto.ListenerListReply")
	proto1.RegisterType((*PipeAddRequest)(nil), "proto.PipeAddRequest")
	proto1.RegisterType((*PipeAddReply)(nil), "proto.PipeAddReply")
	proto1.RegisterType((*PipeDeleteRequest)(nil), "proto.PipeDeleteRequest")
	proto1.RegisterType((*PipeDeleteReply)(nil), "proto.PipeDeleteReply")
	proto1.RegisterType((*PipeListRequest)(nil), "proto.PipeListRequest")
	proto1.RegisterType((*PipeListReply)(nil), "proto.PipeListReply")
	proto1.RegisterType((*Pipe)(nil), "proto.Pipe")
	proto1.RegisterType((*PipeStatus)(nil), "proto.PipeStatus")
	proto1.RegisterType((*Endpoint)(nil), "proto.Endpoint")
	proto1.RegisterType((*Listener)(nil), "proto.Listener")
	proto1.RegisterType((*Profile)(nil), "proto.Profile")
	proto1.RegisterType((*Script)(nil), "proto.Script")
	proto1.RegisterType((*StatsRequest)(nil), "proto.StatsRequest")
	proto1.RegisterType((*StatsReply)(nil), "proto.StatsReply")
	proto1.RegisterType((*Statistics)(nil), "proto.Statistics")
	proto1.RegisterEnum("proto.PipeStatus_State", PipeStatus_State_name, PipeStatus_State_value)
	proto1.RegisterEnum("proto.Profile_Type", Profile_Type_name, Profile_Type_value)
	proto1.RegisterEnum("proto.Script_Type", Script_Type_name, Script_Type_value)
	proto1.RegisterEnum("proto.Script_Input", Script_Input_name, Script_Input_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	EndpointAdd(ctx context.Context, in *EndpointAddRequest, opts ...grpc.CallOption) (*EndpointAddReply, error)
	EndpointDelete(ctx context.Context, in *EndpointDeleteRequest, opts ...grpc.CallOption) (*EndpointDeleteReply, error)
	EndpointList(ctx context.Context, in *EndpointListRequest, opts ...grpc.CallOption) (*EndpointListReply, error)
	ListenerAdd(ctx context.Context, in *ListenerAddRequest, opts ...grpc.CallOption) (*ListenerAddReply, error)
	ListenerDelete(ctx context.Context, in *ListenerDeleteRequest, opts ...grpc.CallOption) (*ListenerDeleteReply, error)
	ListenerList(ctx context.Context, in *ListenerListRequest, opts ...grpc.CallOption) (*ListenerListReply, error)
	// add a pipe to an existing listener and endpoint
	PipeAdd(ctx context.Context, in *PipeAddRequest, opts ...grpc.CallOption) (*PipeAddReply, error)
	// delete pipe by URI
	PipeDelete(ctx context.Context, in *PipeDeleteRequest, opts ...grpc.CallOption) (*PipeDeleteReply, error)
	// list all running pipes
	PipeList(ctx context.Context, in *PipeListRequest, opts ...grpc.CallOption) (*PipeListReply, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) EndpointAdd(ctx context.Context, in *EndpointAddRequest, opts ...grpc.CallOption) (*EndpointAddReply, error) {
	out := new(EndpointAddReply)
	err := grpc.Invoke(ctx, "/proto.Hub/EndpointAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) EndpointDelete(ctx context.Context, in *EndpointDeleteRequest, opts ...grpc.CallOption) (*EndpointDeleteReply, error) {
	out := new(EndpointDeleteReply)
	err := grpc.Invoke(ctx, "/proto.Hub/EndpointDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) EndpointList(ctx context.Context, in *EndpointListRequest, opts ...grpc.CallOption) (*EndpointListReply, error) {
	out := new(EndpointListReply)
	err := grpc.Invoke(ctx, "/proto.Hub/EndpointList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ListenerAdd(ctx context.Context, in *ListenerAddRequest, opts ...grpc.CallOption) (*ListenerAddReply, error) {
	out := new(ListenerAddReply)
	err := grpc.Invoke(ctx, "/proto.Hub/ListenerAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ListenerDelete(ctx context.Context, in *ListenerDeleteRequest, opts ...grpc.CallOption) (*ListenerDeleteReply, error) {
	out := new(ListenerDeleteReply)
	err := grpc.Invoke(ctx, "/proto.Hub/ListenerDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) ListenerList(ctx context.Context, in *ListenerListRequest, opts ...grpc.CallOption) (*ListenerListReply, error) {
	out := new(ListenerListReply)
	err := grpc.Invoke(ctx, "/proto.Hub/ListenerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PipeAdd(ctx context.Context, in *PipeAddRequest, opts ...grpc.CallOption) (*PipeAddReply, error) {
	out := new(PipeAddReply)
	err := grpc.Invoke(ctx, "/proto.Hub/PipeAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PipeDelete(ctx context.Context, in *PipeDeleteRequest, opts ...grpc.CallOption) (*PipeDeleteReply, error) {
	out := new(PipeDeleteReply)
	err := grpc.Invoke(ctx, "/proto.Hub/PipeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) PipeList(ctx context.Context, in *PipeListRequest, opts ...grpc.CallOption) (*PipeListReply, error) {
	out := new(PipeListReply)
	err := grpc.Invoke(ctx, "/proto.Hub/PipeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := grpc.Invoke(ctx, "/proto.Hub/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	EndpointAdd(context.Context, *EndpointAddRequest) (*EndpointAddReply, error)
	EndpointDelete(context.Context, *EndpointDeleteRequest) (*EndpointDeleteReply, error)
	EndpointList(context.Context, *EndpointListRequest) (*EndpointListReply, error)
	ListenerAdd(context.Context, *ListenerAddRequest) (*ListenerAddReply, error)
	ListenerDelete(context.Context, *ListenerDeleteRequest) (*ListenerDeleteReply, error)
	ListenerList(context.Context, *ListenerListRequest) (*ListenerListReply, error)
	// add a pipe to an existing listener and endpoint
	PipeAdd(context.Context, *PipeAddRequest) (*PipeAddReply, error)
	// delete pipe by URI
	PipeDelete(context.Context, *PipeDeleteRequest) (*PipeDeleteReply, error)
	// list all running pipes
	PipeList(context.Context, *PipeListRequest) (*PipeListReply, error)
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_EndpointAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).EndpointAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/EndpointAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).EndpointAdd(ctx, req.(*EndpointAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_EndpointDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).EndpointDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/EndpointDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).EndpointDelete(ctx, req.(*EndpointDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_EndpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).EndpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/EndpointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).EndpointList(ctx, req.(*EndpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ListenerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ListenerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/ListenerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ListenerAdd(ctx, req.(*ListenerAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ListenerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ListenerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/ListenerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ListenerDelete(ctx, req.(*ListenerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_ListenerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).ListenerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/ListenerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).ListenerList(ctx, req.(*ListenerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PipeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipeAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).PipeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/PipeAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).PipeAdd(ctx, req.(*PipeAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PipeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).PipeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/PipeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).PipeDelete(ctx, req.(*PipeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_PipeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).PipeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/PipeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).PipeList(ctx, req.(*PipeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hub/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndpointAdd",
			Handler:    _Hub_EndpointAdd_Handler,
		},
		{
			MethodName: "EndpointDelete",
			Handler:    _Hub_EndpointDelete_Handler,
		},
		{
			MethodName: "EndpointList",
			Handler:    _Hub_EndpointList_Handler,
		},
		{
			MethodName: "ListenerAdd",
			Handler:    _Hub_ListenerAdd_Handler,
		},
		{
			MethodName: "ListenerDelete",
			Handler:    _Hub_ListenerDelete_Handler,
		},
		{
			MethodName: "ListenerList",
			Handler:    _Hub_ListenerList_Handler,
		},
		{
			MethodName: "PipeAdd",
			Handler:    _Hub_PipeAdd_Handler,
		},
		{
			MethodName: "PipeDelete",
			Handler:    _Hub_PipeDelete_Handler,
		},
		{
			MethodName: "PipeList",
			Handler:    _Hub_PipeList_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Hub_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/devicehub.proto",
}

func init() { proto1.RegisterFile("proto/devicehub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0x5d, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x45, 0xfd, 0x79, 0x28, 0x2b, 0xd4, 0xda, 0xb2, 0x59, 0xa1, 0x40, 0x95, 0x0d, 0x82,
	0xd8, 0x68, 0xa3, 0xa2, 0x6a, 0x81, 0xa4, 0xc9, 0x4b, 0x1c, 0x59, 0xad, 0xed, 0xba, 0xb2, 0x40,
	0xd9, 0x69, 0xdf, 0x02, 0x59, 0x5a, 0xc7, 0x0b, 0x29, 0x24, 0x4b, 0x2e, 0x0d, 0xe8, 0x0c, 0xbd,
	0x43, 0x81, 0x3e, 0xf4, 0x16, 0x3d, 0x43, 0x7b, 0xa5, 0x62, 0xff, 0x28, 0x92, 0x52, 0x50, 0x15,
	0x28, 0xf2, 0xc4, 0x9d, 0x99, 0x6f, 0x66, 0xe7, 0x1b, 0xce, 0xee, 0x0e, 0x34, 0x83, 0xd0, 0x67,
	0xfe, 0x97, 0x53, 0x72, 0x4f, 0x27, 0xe4, 0x2e, 0xbe, 0xe9, 0x08, 0x19, 0x95, 0xc4, 0x07, 0x1f,
	0x03, 0xea, 0x7b, 0xd3, 0xc0, 0xa7, 0x1e, 0x3b, 0x9e, 0x4e, 0x5d, 0xf2, 0x4b, 0x4c, 0x22, 0x86,
	0x3e, 0x87, 0x2a, 0x51, 0x5a, 0xc7, 0x68, 0x1b, 0x87, 0x56, 0xf7, 0x81, 0x74, 0xeb, 0x68, 0xb0,
	0x9b, 0x00, 0xf0, 0x39, 0xd8, 0x99, 0x10, 0xc1, 0x7c, 0x81, 0xea, 0x50, 0xf0, 0x67, 0xc2, 0xb5,
	0xea, 0x16, 0xfc, 0x19, 0xda, 0x83, 0x12, 0x09, 0x43, 0x3f, 0x74, 0x0a, 0x6d, 0xe3, 0x70, 0xdb,
	0x95, 0x02, 0xb2, 0xc1, 0x8c, 0xe9, 0xd4, 0x31, 0x85, 0x8e, 0x2f, 0xf1, 0x11, 0x34, 0x75, 0xac,
	0x13, 0x32, 0x27, 0x8c, 0xe8, 0x8c, 0x14, 0xd4, 0x58, 0x42, 0x5f, 0xc2, 0x6e, 0x1e, 0xba, 0xf1,
	0xce, 0xb8, 0xb9, 0x74, 0xbe, 0xa0, 0x11, 0x53, 0xbb, 0xe0, 0x3b, 0x68, 0x64, 0xd5, 0x9b, 0x73,
	0x79, 0x0a, 0xdb, 0xba, 0x22, 0x91, 0x63, 0xb6, 0xcd, 0x75, 0x35, 0x5b, 0x22, 0xf0, 0x1e, 0x20,
	0xbe, 0x03, 0xf1, 0x48, 0xb8, 0xac, 0x3b, 0x7e, 0x0e, 0x76, 0x46, 0xbb, 0x39, 0xa1, 0x03, 0x68,
	0x6a, 0xcf, 0x4c, 0xe1, 0x78, 0x99, 0xf2, 0x86, 0xff, 0x54, 0x26, 0xed, 0x9c, 0x2e, 0xd3, 0xb7,
	0xd0, 0xc8, 0xaa, 0x37, 0x8f, 0xf8, 0xab, 0x01, 0xf5, 0x21, 0x0d, 0x48, 0xaa, 0xd9, 0xf8, 0xaf,
	0x0d, 0x69, 0xf2, 0x6b, 0x43, 0x8a, 0x3e, 0x03, 0x2b, 0x08, 0xfd, 0x5b, 0x3a, 0x27, 0x6f, 0xf9,
	0x4f, 0x97, 0x01, 0x40, 0xa9, 0xae, 0xe9, 0x14, 0x3d, 0x84, 0xda, 0x5c, 0x25, 0xf0, 0x76, 0xd9,
	0x41, 0x96, 0xd6, 0x71, 0xc8, 0x23, 0xd8, 0xd1, 0xd5, 0xe6, 0x90, 0xc8, 0x29, 0xb6, 0xcd, 0xc3,
	0x6d, 0xb7, 0xa6, 0x95, 0xd7, 0x74, 0x1a, 0xe1, 0x6f, 0xa0, 0x96, 0x24, 0xb3, 0x39, 0x87, 0xc7,
	0xd0, 0xe0, 0x5e, 0xab, 0x0d, 0x9a, 0x61, 0x81, 0x9f, 0xc1, 0x83, 0x34, 0x6c, 0xf3, 0xf8, 0x0d,
	0xe9, 0x98, 0xae, 0x78, 0x17, 0x76, 0x96, 0x2a, 0x1e, 0xe9, 0x21, 0x94, 0x02, 0x1a, 0x90, 0xc8,
	0x31, 0x44, 0xab, 0x59, 0xaa, 0xd5, 0x38, 0xc8, 0x95, 0x16, 0xfc, 0x9b, 0x01, 0x45, 0x2e, 0xaf,
	0x29, 0xf0, 0x21, 0x54, 0x54, 0x35, 0x45, 0xe9, 0xac, 0x6e, 0x5d, 0xfb, 0x4b, 0xad, 0xab, 0xcd,
	0xfc, 0x26, 0xd0, 0x55, 0x75, 0x8a, 0x1f, 0xb8, 0x09, 0x34, 0x20, 0x7b, 0x06, 0xca, 0xff, 0x7a,
	0x06, 0x7e, 0x37, 0x00, 0x78, 0x82, 0x23, 0x36, 0x66, 0x71, 0x84, 0x9e, 0x42, 0x29, 0x62, 0x63,
	0x46, 0x44, 0xa2, 0xf5, 0xee, 0x41, 0x8a, 0x92, 0x44, 0x74, 0xf8, 0x87, 0xb8, 0x12, 0x85, 0x9e,
	0x48, 0x78, 0x24, 0x6a, 0x67, 0x75, 0x1b, 0x0a, 0xce, 0x31, 0x34, 0x62, 0x74, 0x12, 0x49, 0x60,
	0x84, 0x5f, 0x42, 0x49, 0x38, 0x22, 0x0b, 0x2a, 0xd7, 0x83, 0x1f, 0x06, 0x97, 0x3f, 0x0d, 0xec,
	0x2d, 0x2e, 0xb8, 0xd7, 0x83, 0xc1, 0xd9, 0xe0, 0x7b, 0xdb, 0xe0, 0xc2, 0xe8, 0xea, 0x72, 0x38,
	0xec, 0x9f, 0xd8, 0x05, 0x2e, 0xf4, 0x5d, 0xf7, 0xd2, 0xed, 0x9f, 0xd8, 0x26, 0xfe, 0xd3, 0x80,
	0xaa, 0xce, 0x7d, 0xf5, 0x12, 0x42, 0x08, 0x8a, 0x6c, 0x11, 0x10, 0xf5, 0xff, 0xc4, 0x1a, 0x9d,
	0xc2, 0xce, 0xc4, 0xf7, 0x6e, 0xe9, 0xbb, 0x38, 0x1c, 0x33, 0xea, 0x7b, 0xea, 0x36, 0xc0, 0xb9,
	0x4a, 0x74, 0x7a, 0x69, 0x50, 0xdf, 0x63, 0xe1, 0xc2, 0xcd, 0x3a, 0xb6, 0x5e, 0x01, 0x5a, 0x05,
	0xf1, 0x2c, 0x66, 0x64, 0xa1, 0xb3, 0x98, 0x91, 0x05, 0x6f, 0xa3, 0xfb, 0xf1, 0x3c, 0xd6, 0x69,
	0x48, 0xe1, 0x45, 0xe1, 0xb9, 0x21, 0xd2, 0xd7, 0x47, 0xf5, 0xff, 0x49, 0x5f, 0x47, 0xfb, 0x28,
	0xe9, 0xff, 0x6d, 0x40, 0x45, 0xb5, 0xe4, 0xfa, 0xec, 0xbd, 0xf1, 0xfb, 0x24, 0x7b, 0xbe, 0x46,
	0x4f, 0x14, 0x23, 0x53, 0xf4, 0xd0, 0x6e, 0xb6, 0xad, 0x3b, 0x57, 0x8b, 0x80, 0x28, 0x9a, 0x6d,
	0xb0, 0xa6, 0x24, 0x9a, 0x84, 0x34, 0x10, 0x24, 0x8b, 0xf2, 0x06, 0x49, 0xa9, 0x90, 0x03, 0x95,
	0x7b, 0x12, 0x46, 0xdc, 0x5a, 0x12, 0x56, 0x2d, 0xa2, 0xc7, 0x50, 0x96, 0x30, 0xa7, 0x2c, 0x7a,
	0x6f, 0x47, 0xf7, 0x9e, 0x50, 0xba, 0xca, 0x88, 0x11, 0x14, 0xf9, 0x86, 0x08, 0xa0, 0x2c, 0x2d,
	0xf6, 0x16, 0xfe, 0xcb, 0xd0, 0x02, 0x4f, 0xff, 0xfd, 0x98, 0x7a, 0x8a, 0x91, 0x58, 0xa3, 0x2f,
	0xa0, 0x12, 0xc6, 0x1e, 0xa3, 0x8a, 0x55, 0xbd, 0x8b, 0x32, 0xa1, 0x25, 0x01, 0x0d, 0x41, 0x47,
	0x50, 0xa2, 0x5e, 0x10, 0xb3, 0x1c, 0x5b, 0x85, 0x3d, 0xe3, 0x26, 0x57, 0x22, 0x50, 0x0b, 0xaa,
	0x13, 0xdf, 0x63, 0x84, 0x9f, 0x4c, 0xc9, 0x35, 0x91, 0xf1, 0xbe, 0xca, 0xb3, 0x0e, 0x70, 0x7e,
	0xfc, 0xe6, 0x78, 0xd4, 0x73, 0xcf, 0x86, 0x57, 0xf6, 0x16, 0x7e, 0x04, 0x25, 0x11, 0x03, 0x55,
	0xa1, 0x78, 0x3e, 0xba, 0xe4, 0xa7, 0xa6, 0x02, 0x66, 0x6f, 0xf4, 0xc6, 0x36, 0xf8, 0xe2, 0xe7,
	0x1f, 0x2f, 0xec, 0x02, 0xae, 0x43, 0x8d, 0x9f, 0xae, 0x68, 0x79, 0x53, 0x81, 0x92, 0x37, 0xbf,
	0xf0, 0xce, 0xa5, 0x8f, 0x3c, 0xb6, 0x1c, 0xc3, 0x7c, 0x36, 0x9e, 0x0b, 0xb7, 0xa2, 0x2b, 0x05,
	0xb4, 0x0f, 0x65, 0x01, 0x96, 0xe7, 0xbd, 0xe8, 0x2a, 0x49, 0xed, 0x60, 0x0a, 0x5d, 0xc1, 0x9f,
	0x75, 0xff, 0x28, 0x81, 0x79, 0x1a, 0xdf, 0xa0, 0x1e, 0x58, 0xa9, 0xa9, 0x04, 0x7d, 0x92, 0x3b,
	0x7d, 0xcb, 0xf7, 0xa7, 0x75, 0xb0, 0xce, 0x14, 0xcc, 0x17, 0x78, 0x0b, 0x5d, 0x40, 0x3d, 0x3b,
	0x63, 0xa0, 0x4f, 0x73, 0xe0, 0xcc, 0x23, 0xd0, 0x6a, 0x7d, 0xc0, 0x2a, 0xa3, 0x7d, 0x07, 0xb5,
	0xf4, 0x74, 0x81, 0xf2, 0xe8, 0xd4, 0x85, 0xdf, 0x72, 0xd6, 0xda, 0x64, 0x9c, 0x1e, 0x58, 0xa9,
	0x29, 0x21, 0xa1, 0xb6, 0x3a, 0x4f, 0x24, 0xd4, 0xf2, 0x43, 0x85, 0xa4, 0x96, 0x9d, 0x0b, 0x12,
	0x6a, 0x6b, 0xe7, 0x88, 0x84, 0xda, 0x9a, 0x61, 0x42, 0x52, 0x4b, 0x4f, 0x04, 0x28, 0x8f, 0x5e,
	0x47, 0x6d, 0x65, 0x84, 0xc0, 0x5b, 0xe8, 0x19, 0x54, 0xd4, 0x83, 0x8c, 0x9a, 0xa9, 0xfb, 0x3f,
	0x45, 0x69, 0x37, 0xaf, 0x96, 0x8e, 0xaf, 0xe4, 0x53, 0xa2, 0xa8, 0x38, 0x29, 0x50, 0x96, 0xc6,
	0xfe, 0x1a, 0x8b, 0x8c, 0xf0, 0x02, 0xaa, 0xfa, 0x89, 0x45, 0x69, 0x54, 0x3a, 0xf5, 0xbd, 0x15,
	0xbd, 0xf4, 0xfd, 0x4a, 0x3e, 0x31, 0x11, 0xda, 0x4d, 0xbd, 0x42, 0xfa, 0x48, 0xb4, 0x1a, 0x59,
	0xa5, 0x70, 0x79, 0x7d, 0x04, 0x4d, 0xea, 0x77, 0xd8, 0x1d, 0xf5, 0xde, 0xdd, 0xc6, 0xf3, 0x4e,
	0x32, 0x9e, 0xbf, 0xae, 0x9f, 0x88, 0xe5, 0x69, 0x7c, 0x33, 0xe4, 0x5e, 0x43, 0xe3, 0xa6, 0x2c,
	0xdc, 0xbf, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x46, 0xa5, 0x52, 0x2e, 0xca, 0x0b, 0x00, 0x00,
}
